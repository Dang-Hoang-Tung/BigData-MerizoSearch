- name: Install and configure Hadoop on all nodes
  hosts: all
  vars_files:
    - variables.yaml
  tasks:
    - name: Download Hadoop
      ansible.builtin.get_url:
        url: "{{ hadoop_download_url }}"
        dest: "{{ hadoop_archive_file_path }}"
    - name: Unpack Hadoop tgz file
      ansible.builtin.unarchive:
        src: "{{ hadoop_archive_file_path }}"
        dest: "{{ working_dir }}"
        creates: "{{ hadoop_home_dir }}"
        remote_src: true
        extra_opts:
          - --transform
          - "s/^hadoop[a-zA-Z0-9._-]*/{{ hadoop_home_dir_name }}/"

    - name: Remove Hadoop archive file
      ansible.builtin.file:
        path: "{{ hadoop_archive_file_path }}"
        state: absent

    - name: Configure core-site.xml
      ansible.builtin.blockinfile:
        path: "{{ hadoop_config_dir }}/core-site.xml"
        insertbefore: </configuration>
        marker: "<!-- {mark} ANSIBLE MANAGED BLOCK -->"
        block: |
          <property>
              <name>fs.default.name</name>
              <value>hdfs://mgmtnode:9000/</value>
          </property>
          <property>
              <name>fs.default.FS</name>
              <value>hdfs://mgmtnode:9000/</value>
          </property>
        state: present
    - name: Configure hdfs-site.xml
      ansible.builtin.blockinfile:
        path: "{{ hadoop_config_dir }}/hdfs-site.xml"
        insertbefore: </configuration>
        marker: "<!-- {mark} ANSIBLE MANAGED BLOCK -->"
        block: |
          <property>
              <name>dfs.datanode.data.dir</name>
              <value>{{ hdfs_datanode_dir }}</value>
              <final>true</final>
          </property>
          <property>
              <name>dfs.namenode.name.dir</name>
              <value>{{ hdfs_namenode_dir }}</value>
              <final>true</final>
          </property>
          <property>
              <name>dfs.replication</name>
              <value>2</value>
          </property>
        state: present
    - name: Configure yarn-site.xml
      ansible.builtin.blockinfile:
        path: "{{ hadoop_config_dir }}/yarn-site.xml"
        insertbefore: </configuration>
        marker: "<!-- {mark} ANSIBLE MANAGED BLOCK -->"
        block: |
          <property>
              <name>yarn.resourcemanager.resource-tracker.address</name>
              <value>mgmtnode:8025</value>
          </property>
          <property>
              <name>yarn.resourcemanager.scheduler.address</name>
              <value>mgmtnode:8035</value>
          </property>
          <property>
              <name>yarn.resourcemanager.address</name>
              <value>mgmtnode:8050</value>
          </property>
          <property>
              <name>yarn.log-aggregation-enable</name>
              <value>true</value>
          </property>
          <property>
              <name>yarn.nodemanager.resource.memory-mb</name>
              <value>28672</value>
          </property>
          <property>
              <name>yarn.nodemanager.resource.cpu-vcores</name>
              <value>4</value>
          </property>
          <property>
              <name>yarn.scheduler.maximum-allocation-mb</name>
              <value>8448</value>
          </property>
          <property>
              <name>yarn.scheduler.minimum-allocation-vcores</name>
              <value>1</value>
          </property>
        state: present
    - name: Configure mapred-site.xml
      ansible.builtin.blockinfile:
        path: "{{ hadoop_config_dir }}/mapred-site.xml"
        insertbefore: </configuration>
        marker: "<!-- {mark} ANSIBLE MANAGED BLOCK -->"
        block: |
          <property>
              <name>mapreduce.job.tracker</name>
              <value>mgmtnode:5431</value>
          </property>
          <property>
              <name>mapred.framework.name</name>
              <value>yarn</value>
          </property>
        state: present
    - name: Configure capacity-scheduler.xml
      ansible.builtin.blockinfile:
        path: "{{ hadoop_config_dir }}/capacity-scheduler.xml"
        insertbefore: </configuration>
        marker: "<!-- {mark} ANSIBLE MANAGED BLOCK -->"
        block: |
          <property>
              <name>yarn.scheduler.capacity.resource-calculator</name>
              <value>org.apache.hadoop.yarn.util.resource.DominantResourceCalculator</value>
          </property>
        state: present
        
    - name: Fix JAVA_HOME in Hadoop Env script
      ansible.builtin.blockinfile:
        path: "{{ hadoop_config_dir }}/hadoop-env.sh"
        insertafter: "# export JAVA_HOME="
        block: |
          export JAVA_HOME=$(readlink -f /usr/bin/java | sed "s:bin/java::")
        state: present

- name: Configure hdfs on worker nodes
  hosts: workergroup
  vars_files:
    - variables.yaml
  tasks:
    - name: Create datanode folder
      ansible.builtin.file:
        path: "{{ hdfs_datanode_dir }}"
        state: directory

- name: Configure hdfs on mgmt node
  hosts: mgmtgroup
  vars_files:
    - variables.yaml
  tasks:
    - name: Generate workers file
      ansible.builtin.template:
        src: templates/workers.j2
        dest: "{{ hadoop_config_dir }}/workers"
    - name: Create namenode directory
      ansible.builtin.file:
        path: "{{ hdfs_namenode_dir }}"
        state: directory
    - name: Check status of namenode directory
      ansible.builtin.stat:
        path: "{{ hdfs_namenode_dir }}/current"
      register: namenode_formatted
    - name: Format hdfs cluster
      ansible.builtin.shell: hdfs namenode -format
      # Idempotent: if namenode is already formatted, will not format again
      when: not namenode_formatted.stat.exists
